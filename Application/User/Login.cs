using System.Net;
using System.Threading;
using System.Threading.Tasks;
using Application.Activities.Errors;
using Domain;
using FluentValidation;
using MediatR;
using Microsoft.AspNetCore.Identity;
using Persistence;

namespace Application.User
{
    public class Login
    {
        //returning User object from /Application/User/user
        public class Query : IRequest<User>
        {
            public string Email { get; set; }
            public string Password { get; set; }
        }

        //using AbstractValidator from FluentValidation
        public class QueryValidator : AbstractValidator<Query>
        {
            public QueryValidator()
            {
                RuleFor(x => x.Email).NotEmpty();
                RuleFor(x => x.Password).NotEmpty();
            }
        }

        //returning User object from /Application/User/user
        public class Handler : IRequestHandler<Query, User>
        {
            private readonly UserManager<AppUser> _userManager;
            private readonly SignInManager<AppUser> _signInManager;
            public Handler(UserManager<AppUser> userManager, SignInManager<AppUser> signInManager)
            {
                _userManager = userManager;
                _signInManager = signInManager;
            }

            //returning User object from /Application/User/user
            public async Task<User> Handle(Query request, CancellationToken cancellationToken)
            {
                var user = await _userManager.FindByEmailAsync(request.Email);

                //if the user is not found throw an exception
                if (user == null){
                    throw new RestExceptions(HttpStatusCode.Unauthorized);
                }

                //check password when signing in
                //the 'false' will make sure the user will NOT be lockedout in case of a failed login attempt
                var results = await _signInManager.CheckPasswordSignInAsync(user, request.Password, false);

                //if login is successful
                if  (results.Succeeded)
                {
                    //TO do generate token

                    //returning User object from /Application/User/user => this will return a customized output, otherwise it'll return unwanted data such as password hashes & etc generated by the system
                    return new User
                    {
                        DisplayName = user.DisplayName,//user.DisplayName defined in AppUser
                        Token = "Not Created yet",
                        Username = user.UserName,//user.UserName is coming from .Net core IdentityUser
                        Image = null
                    };
                }

                throw new RestExceptions(HttpStatusCode.Unauthorized);
            }
        }
    }
}